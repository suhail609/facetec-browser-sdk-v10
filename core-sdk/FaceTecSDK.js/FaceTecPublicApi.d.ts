/** Represents the reason why intialization failed. */
export declare enum FaceTecInitializationError {
    /**
     * The FaceTec Server could not validate this application.
     */
    RejectedByServer = 0,
    /**
     * The provided FaceTecSessionRequestProcessor called abortOnCatastrophicError() and the application could not be validated.
     */
    RequestAborted = 1,
    /**
     *  This device/platform/browser/version combination is not supported by the FaceTec Browser SDK.
     */
    DeviceNotSupported = 2,
    /**
     * An unknown and unexpected error occurred.
     */
    UnknownInternalError = 3,
    /**
     * FaceTec SDK could not load resources.
     */
    ResourcesCouldNotBeLoadedOnLastInit = 4,
    /**
     * Browser Camera APIs are only supported on localhost or https.
     */
    GetUserMediaRemoteHTTPNotSupported = 5
}
/**
 * Vocal Guidance Modes
 * By default VocalGuidanceCustomization mode is set to MINIMAL_VOCAL_GUIDANCE
 */
export declare enum FaceTecVocalGuidanceMode {
    MINIMAL_VOCAL_GUIDANCE = 0,
    FULL_VOCAL_GUIDANCE = 1,
    NO_VOCAL_GUIDANCE = 2
}
/**
 * The callback that is invoked when the SDK has finished initializing.
 */
export interface FaceTecInitializeCallback {
    /**
     * Invoked when the SDK has been initialized successfully.
     * @param sdkInstance The {@link FaceTecSDKInstance} instance that can be used to start sessions.
     */
    onSuccess(sdkInstance: FaceTecSDKInstance): void;
    /**
     * Invoked when the SDK cannot be initialized.
     * @param error A {@link FaceTecInitializationError} value that indicates why initialization did not succeed.
     */
    onError(error: FaceTecInitializationError): void;
}
/**
 * A callback that will be provided to return a Response Blob
 */
export interface FaceTecSessionRequestProcessorCallback {
    /**
     * Called to return a Response Blob provided by the FaceTec Server.
     * @param responseBlob The Response Blob from the FaceTec Server.
     */
    processResponse(responseBlob: string): void;
    /**
     * Called to provide an update on the progress of uploading the Request Blob.
     * @param uploadPercent The current percentage of the Request Blob that has been uploaded.
     */
    updateProgress(uploadPercent: number): void;
    /**
     * Called to indicate that a Response Blob could not be retrieved for the provided Request Blob.
     */
    abortOnCatastrophicError(): void;
}
/**
 * Represents the various end states of a FaceTec Session. This will be available after a Session returns to your application in the FaceTecSessionResult.
 */
export declare enum FaceTecSessionStatus {
    /**
     * The Session was completed successfully.
     */
    SessionCompleted = 0,
    /**
     * The Session was cancelled because abortOnCatastrophicError() was called.
     */
    RequestAborted = 1,
    /**
     * The user cancelled before performing enough Scans to Succeed.
     */
    UserCancelledFaceScan = 2,
    /**
     * The user cancelled before completing all of the steps in the ID Scan Process.
     */
    UserCancelledIDScan = 3,
    /**
     * The Session was cancelled because the user was in a locked out state.
     */
    LockedOut = 4,
    /**
     * The Session was cancelled because FaceTec SDK was unable to start the camera on this device, or an unexpected error occurred with the camera during runtime.
     */
    CameraError = 5,
    /**
     * The Session was cancelled because Camera Permissions were not enabled.
     */
    CameraPermissionsDenied = 6,
    /**
     * An unknown and unexpected error occurred.
     */
    UnknownInternalError = 7,
    /**
     * The Session was cancelled, the FaceTec Browser SDK was opened in an Iframe without permission.
     */
    IFrameNotAllowedWithoutPermission = 8
}
/**
 * Represents results of a session. To get the results in the onActivityResult method
 * you will call getParcelableExtra(FaceTecSDK.EXTRA_SESSION_RESULTS). These results will consist of a number
 * of variables that give more detail about the enrollment attempt.
 */
export interface FaceTecSessionResult {
    /** The result of the session */
    status: FaceTecSessionStatus;
}
/**
 * The interface that must be implemented to process the Request Blobs that are provided
 * by the FaceTec SDK
 */
export interface FaceTecSessionRequestProcessor {
    /**
     * Called when a new Request Blob has been generated by the FaceTec SDK that needs to be processed
     * by the Server
     * @param requestBlob A blob of data that should be sent to the Server
     * @param requestCallback The callback that needs to be invoked when the Request Blob has been processed by the Server
     */
    onSessionRequest(requestBlob: string, requestCallback: FaceTecSessionRequestProcessorCallback): void;
    onFaceTecExit(result: FaceTecSessionResult): void;
}
/**
 * The instance object provided when the FaceTec SDK is initialized successfully.  All operations are initiated via this object.
 */
export interface FaceTecSDKInstance {
    /**
     * Launches a Liveness session.
     * @param sessionRequestProcessor A custom object for processing SDK requests.
     */
    start3DLiveness(sessionRequestProcessor: FaceTecSessionRequestProcessor): void;
    /**
     * Launches a 3D Match session.
     * @param sessionRequestProcessor
     */
    start3DLivenessThen3DFaceMatch(sessionRequestProcessor: FaceTecSessionRequestProcessor): void;
    /**
     * Launches an IDScanOnly session.
     * @param sessionRequestProcessor A custom object for processing SDK requests.
     */
    startIDScanOnly(sessionRequestProcessor: FaceTecSessionRequestProcessor): void;
    /**
     * Launches an ID Match session.
     * @param sessionRequestProcessor A custom object for processing SDK requests.
     */
    startIDScanThen3D2DMatch(sessionRequestProcessor: FaceTecSessionRequestProcessor): void;
    /**
     * Launches an ID Scan session that will match to an existing FaceMap
     * @param sessionRequestProcessor A custom object for processing SDK requests.
     */
    start3DLivenessThen3D2DPhotoIDMatch(sessionRequestProcessor: FaceTecSessionRequestProcessor): void;
    /**
     * Launches an Official ID Photo session.
     * @param sessionRequestProcessor A custom object for processing SDK requests.
     */
    startSecureOfficialIDPhotoCapture(sessionRequestProcessor: FaceTecSessionRequestProcessor): void;
}
//# sourceMappingURL=FaceTecPublicApi.d.ts.map